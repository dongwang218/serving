// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inception_inference.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inception_inference.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

namespace {

const ::google::protobuf::Descriptor* InceptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InceptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InceptionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InceptionResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inception_5finference_2eproto() {
  protobuf_AddDesc_inception_5finference_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inception_inference.proto");
  GOOGLE_CHECK(file != NULL);
  InceptionRequest_descriptor_ = file->message_type(0);
  static const int InceptionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionRequest, image_data_),
  };
  InceptionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InceptionRequest_descriptor_,
      InceptionRequest::default_instance_,
      InceptionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(InceptionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionRequest, _is_default_instance_));
  InceptionResponse_descriptor_ = file->message_type(1);
  static const int InceptionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionResponse, value_),
  };
  InceptionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InceptionResponse_descriptor_,
      InceptionResponse::default_instance_,
      InceptionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(InceptionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InceptionResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inception_5finference_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InceptionRequest_descriptor_, &InceptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InceptionResponse_descriptor_, &InceptionResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inception_5finference_2eproto() {
  delete InceptionRequest::default_instance_;
  delete InceptionRequest_reflection_;
  delete InceptionResponse::default_instance_;
  delete InceptionResponse_reflection_;
}

void protobuf_AddDesc_inception_5finference_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031inception_inference.proto\022\022tensorflow."
    "serving\"&\n\020InceptionRequest\022\022\n\nimage_dat"
    "a\030\001 \001(\014\"&\n\021InceptionResponse\022\021\n\005value\030\001 "
    "\003(\002B\002\020\0012k\n\020InceptionService\022W\n\010Classify\022"
    "$.tensorflow.serving.InceptionRequest\032%."
    "tensorflow.serving.InceptionResponseb\006pr"
    "oto3", 244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inception_inference.proto", &protobuf_RegisterTypes);
  InceptionRequest::default_instance_ = new InceptionRequest();
  InceptionResponse::default_instance_ = new InceptionResponse();
  InceptionRequest::default_instance_->InitAsDefaultInstance();
  InceptionResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inception_5finference_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inception_5finference_2eproto {
  StaticDescriptorInitializer_inception_5finference_2eproto() {
    protobuf_AddDesc_inception_5finference_2eproto();
  }
} static_descriptor_initializer_inception_5finference_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InceptionRequest::kImageDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InceptionRequest::InceptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.InceptionRequest)
}

void InceptionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InceptionRequest::InceptionRequest(const InceptionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.InceptionRequest)
}

void InceptionRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InceptionRequest::~InceptionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.InceptionRequest)
  SharedDtor();
}

void InceptionRequest::SharedDtor() {
  image_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InceptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InceptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InceptionRequest_descriptor_;
}

const InceptionRequest& InceptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inception_5finference_2eproto();
  return *default_instance_;
}

InceptionRequest* InceptionRequest::default_instance_ = NULL;

InceptionRequest* InceptionRequest::New(::google::protobuf::Arena* arena) const {
  InceptionRequest* n = new InceptionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InceptionRequest::Clear() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InceptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.InceptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes image_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.InceptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.InceptionRequest)
  return false;
#undef DO_
}

void InceptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.InceptionRequest)
  // optional bytes image_data = 1;
  if (this->image_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.InceptionRequest)
}

::google::protobuf::uint8* InceptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.InceptionRequest)
  // optional bytes image_data = 1;
  if (this->image_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.InceptionRequest)
  return target;
}

int InceptionRequest::ByteSize() const {
  int total_size = 0;

  // optional bytes image_data = 1;
  if (this->image_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InceptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InceptionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InceptionRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InceptionRequest::MergeFrom(const InceptionRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.image_data().size() > 0) {

    image_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
}

void InceptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InceptionRequest::CopyFrom(const InceptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InceptionRequest::IsInitialized() const {

  return true;
}

void InceptionRequest::Swap(InceptionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InceptionRequest::InternalSwap(InceptionRequest* other) {
  image_data_.Swap(&other->image_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InceptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InceptionRequest_descriptor_;
  metadata.reflection = InceptionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InceptionRequest

// optional bytes image_data = 1;
void InceptionRequest::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InceptionRequest::image_data() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InceptionRequest.image_data)
  return image_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InceptionRequest::set_image_data(const ::std::string& value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.InceptionRequest.image_data)
}
 void InceptionRequest::set_image_data(const char* value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.InceptionRequest.image_data)
}
 void InceptionRequest::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.InceptionRequest.image_data)
}
 ::std::string* InceptionRequest::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.InceptionRequest.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InceptionRequest::release_image_data() {
  
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InceptionRequest::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.InceptionRequest.image_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InceptionResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InceptionResponse::InceptionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.InceptionResponse)
}

void InceptionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InceptionResponse::InceptionResponse(const InceptionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.InceptionResponse)
}

void InceptionResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

InceptionResponse::~InceptionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.InceptionResponse)
  SharedDtor();
}

void InceptionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InceptionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InceptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InceptionResponse_descriptor_;
}

const InceptionResponse& InceptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inception_5finference_2eproto();
  return *default_instance_;
}

InceptionResponse* InceptionResponse::default_instance_ = NULL;

InceptionResponse* InceptionResponse::New(::google::protobuf::Arena* arena) const {
  InceptionResponse* n = new InceptionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InceptionResponse::Clear() {
  value_.Clear();
}

bool InceptionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.InceptionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.InceptionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.InceptionResponse)
  return false;
#undef DO_
}

void InceptionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.InceptionResponse)
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.InceptionResponse)
}

::google::protobuf::uint8* InceptionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.InceptionResponse)
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.InceptionResponse)
  return target;
}

int InceptionResponse::ByteSize() const {
  int total_size = 0;

  // repeated float value = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InceptionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InceptionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InceptionResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InceptionResponse::MergeFrom(const InceptionResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  value_.MergeFrom(from.value_);
}

void InceptionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InceptionResponse::CopyFrom(const InceptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InceptionResponse::IsInitialized() const {

  return true;
}

void InceptionResponse::Swap(InceptionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InceptionResponse::InternalSwap(InceptionResponse* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InceptionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InceptionResponse_descriptor_;
  metadata.reflection = InceptionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InceptionResponse

// repeated float value = 1 [packed = true];
int InceptionResponse::value_size() const {
  return value_.size();
}
void InceptionResponse::clear_value() {
  value_.Clear();
}
 float InceptionResponse::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.InceptionResponse.value)
  return value_.Get(index);
}
 void InceptionResponse::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.InceptionResponse.value)
}
 void InceptionResponse::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.InceptionResponse.value)
}
 const ::google::protobuf::RepeatedField< float >&
InceptionResponse::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.InceptionResponse.value)
  return value_;
}
 ::google::protobuf::RepeatedField< float >*
InceptionResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.InceptionResponse.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
